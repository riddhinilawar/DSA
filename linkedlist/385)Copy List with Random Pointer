Approach 1) Using HashMap:-

class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head==null)return head;

        ListNode before=null;
        ListNode after=null;
        ListNode beforehead=null;
        ListNode afterhead=null;
        ListNode curr=head;
        while(curr!=null){
            if(curr.val<x){
                if(before==null){
                    before=curr;
                    beforehead=curr;
                    curr=curr.next;
                    before.next=null;
                }
                else{
                    before.next=curr;
                    curr=curr.next;
                    before=before.next;
                    before.next=null;
                }
            }
            else{
                if(after==null){
                    after=curr;
                    afterhead=curr;
                    curr=curr.next;
                    after.next=null;
                }
                else{
                    after.next=curr;
                    curr=curr.next;
                    after=after.next;
                    after.next=null;
                }
            }
            
        }
        if(before==null)return afterhead;
        before.next=afterhead;
        return beforehead;
    }
}
--------------------------------------------------------------------------------------------------------------------------
Approach 2)Insert inbetween
class Solution {
    public Node copyRandomList(Node head) {
        if(head==null) return head;
        Node temp=head;
        while(temp!=null){
            
            Node nextnode=temp.next;
            Node newnode = new Node(temp.val);
            newnode.next=nextnode;
            temp.next=newnode;
            temp= temp.next.next;
        }
        
        
        temp=head;
        while(temp!=null){
            if(temp.random==null)
                temp.next.random=null;
            else
                temp.next.random=temp.random.next;
            temp= temp.next.next;
        }


        Node original = head, copy = head.next;
        temp = copy;
  
        while (original != null) {
            original.next =original.next.next;
            copy.next = (copy.next != null) ? copy.next.next: copy.next;
            original = original.next;
            copy = copy.next;
        }
        return temp;
    }
}

