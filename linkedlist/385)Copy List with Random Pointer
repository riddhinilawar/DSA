Approach 1) Using HashMap:-

class Solution {
    public Node copyRandomList(Node head) {
        Node temp=head;
        HashMap<Node,Node> map =new HashMap<>();

        Node anshead=null;
        Node t=null;
        while(temp!=null){
            Node newnode = new Node(temp.val);
            map.put(temp,newnode);

            if(anshead==null){
                anshead=newnode;
                t=newnode;
            }
            else{
                t.next=newnode;
                t=t.next;
            }
            temp= temp.next;
        }

        temp=head;
        t=anshead;
        while(temp!=null){
            if(temp.random!=null)
                t.random = map.get(temp.random);
            else
                t.random=null;

            t=t.next;
            temp=temp.next;
        }
        return anshead;
    }
}
--------------------------------------------------------------------------------------------------------------------------
Approach 2)Insert inbetween
class Solution {
    public Node copyRandomList(Node head) {
        if(head==null) return head;
        Node temp=head;
        while(temp!=null){
            
            Node nextnode=temp.next;
            Node newnode = new Node(temp.val);
            newnode.next=nextnode;
            temp.next=newnode;
            temp= temp.next.next;
        }
        
        
        temp=head;
        while(temp!=null){
            if(temp.random==null)
                temp.next.random=null;
            else
                temp.next.random=temp.random.next;
            temp= temp.next.next;
        }


        Node original = head, copy = head.next;
        temp = copy;
  
        while (original != null) {
            original.next =original.next.next;
            copy.next = (copy.next != null) ? copy.next.next: copy.next;
            original = original.next;
            copy = copy.next;
        }
        return temp;
    }
}

